<?xml version="1.0"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:BB="BaconBox.*" width="500" height="300" creationComplete="creationCompleteHandler(event)">
	<fx:Style source="./spark_graphite.css"/>

	<fx:Script><![CDATA[
        import BaconBox.TextureAtlas;

        import mx.controls.Alert;
        import mx.events.FlexEvent;
        import mx.graphics.shaderClasses.ColorBurnShader;

        import spark.events.IndexChangeEvent;

        private var _atlasList:Array = new Array();
        private var _exportPath:String;
		private var _rememberExportPath:Boolean;
		private var _calledFromConsole:Boolean;
		private var _atlasIterator:int;


        private function onClick(event:MouseEvent):void {
            if (event.target.id == "loadButton") {
                onLoadButton();
            }
            else if (event.target.id == "exportButton") {
                onExportButton();
            }
			else if (event.target.id == "clearButton") {
				onClearButton();
			}
			else if( event.target.id == "forgetPathButton"){
				onForgetPathButton();

			}
        }

		private function onClearButton():void {
			clearLoadedList();
		}

		private function onForgetPathButton(){
			//				_rememberExportPath = false;
			_exportPath = ""
		}



        private function onInvoke(event:InvokeEvent):void {
			if(event.arguments.length != 0){
				_calledFromConsole = true;
				_exportPath = event.arguments.pop();
				_atlasList = event.arguments;
				onExportButton();
			}


        }

		private function keyDown(event:KeyboardEvent):void {
			if(event.keyCode == 76 ){
				onLoadButton();
			}
			else if(event.keyCode == 69){
				onExportButton();
			}
			else if(event.keyCode == 67){
				onClearButton();
			}
			else if(event.keyCode == 70){
				onForgetPathButton();
			}
		}


		private function loadAtlasList(){
			for each(var path:String in _atlasList) {
				loadTextureAtlas(new File(path));
			}
		}

        private function reloadTextureAtlas():void {
			_atlasList = new Array();
			for each(var textureAtlas:TextureAtlas  in textureAtlasList.dataProvider) {
				if(_atlasList.indexOf(textureAtlas.loadFile.nativePath) == -1)_atlasList.push(textureAtlas.loadFile.nativePath);
			}
			clearLoadedList();
			loadAtlasList();
        }

		private function clearLoadedList():void {
			for each(var textureAtlas:TextureAtlas  in textureAtlasList.dataProvider) {
				textureAtlas.destroy();
			}
			textureAtlasList.dataProvider.removeAll();
		}

		private function onExportButton():void {
			_atlasIterator = 0;
			_atlasList = new Array();
			for each(var textureAtlas:TextureAtlas  in textureAtlasList.dataProvider) {
				if(_atlasList.indexOf(textureAtlas.loadFile.nativePath) == -1)_atlasList.push(textureAtlas.loadFile.nativePath);
			}
			clearLoadedList();
			loadAtlasList();
			exportTextureAtlas(_exportPath)
		}

		private function exportNextAtlas(iterator:int):void {
			if(iterator >= textureAtlasList.dataProvider.length){
				textureAtlasList.dataProvider[textureAtlasList.dataProvider.length - 1].unload();
				exportButton.enabled = true;
				_atlasIterator = 0;
				reloadTextureAtlas();
				if(!_calledFromConsole) Alert.show('Done!');

			}
			else{
				exportButton.enabled = false;
				if(iterator - 1 >= 0) textureAtlasList.dataProvider[iterator - 1].unload();
				var atlas = textureAtlasList.dataProvider[iterator];
					atlas.export(new File(_exportPath), function(success){if(success){
						exportNextAtlas(iterator + 1)
					}
					else{
						exportButton.enabled = true;
						Alert.show(atlas.error);
					}});
				_atlasIterator++;
			}

		}

        private function exportTextureAtlas(path:String = ""):void {
			var hadError:Boolean = false;
            if (path == "") {
                var so:SharedObject = SharedObject.getLocal("lastExportDirectory");
                var filePicker:File;
                if (so.size != 0 && so.data.lastExportDirectory != undefined) {
                    filePicker = new File(so.data.lastExportDirectory);

                }
                if (filePicker == null || !filePicker.exists) {
                    filePicker = File.documentsDirectory;
                }
                filePicker.browseForDirectory("Select an export folder");
                filePicker.addEventListener(Event.SELECT, function (event:Event):void {
					_exportPath = filePicker.nativePath;
					so.data.lastExportDirectory = filePicker.nativePath;
					exportNextAtlas(_atlasIterator);
				});
            }

            else {
				_exportPath = path;
				exportNextAtlas(_atlasIterator);
            }


		}

        private function onLoadButton() {
                var so:SharedObject = SharedObject.getLocal("lastLoadDirectory");
                var textureAtlas:TextureAtlas = new TextureAtlas();
                var filePicker:File;
                if (so.size != 0 && so.data.lastLoadDirectory != "") {
                    filePicker = new File(so.data.lastLoadDirectory);

                }
                if (filePicker == null || !filePicker.exists) {
                    filePicker = File.documentsDirectory;
                }

                var filter:FileFilter = new FileFilter("JSON", "*.json");
                filePicker.browseForOpenMultiple("Select files", [filter]);
                filePicker.addEventListener(FileListEvent.SELECT_MULTIPLE, function (event):void {
                    for each (var file:File in event.files) {
						loadTextureAtlas(file);
                    }
                    var so:SharedObject = SharedObject.getLocal("lastLoadDirectory");
                    so.data.lastLoadDirectory = event.files[0].parent.nativePath;
					exportButton.setFocus();
                });
        }

        private function loadTextureAtlas(file:File){
			var textureAtlasArray:Array = TextureAtlas.loadFromJson(file);
			for each(var textureAtlas:TextureAtlas in textureAtlasArray) {
				textureAtlasList.dataProvider.addItem(textureAtlas);
			}
        }


        private function creationCompleteHandler(event:FlexEvent):void {
            NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);
			this.addEventListener(KeyboardEvent.KEY_DOWN,keyDown);

			_exportPath = "";

			_rememberExportPath = true;
			_calledFromConsole = false;
			loadButton.setFocus();
        }




        ]]>

	</fx:Script>

	<s:VGroup width="100%" height="100%"  paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
		<s:HGroup>
			<s:Button id="loadButton" label="Load SWF/JSON" click="onClick(event)" />
			<s:Button id="clearButton" label="Clear" click="onClick(event)" />

		</s:HGroup>
		<s:HGroup width="100%" height="100%">
			<s:VGroup width="100%" height="100%">
				<s:VGroup width="100%" height="100%">
					<s:Label text="Texture atlas" />
					<s:List  id="textureAtlasList" height="100%" width="100%">
						<s:itemRenderer>
							<fx:Component>
							  <s:ItemRenderer>
								  <s:HGroup paddingLeft="3" paddingRight="3" paddingTop="5" paddingBottom="5" width="100%">
									  <s:Label text="{data.name}" width="100%"/>
									  <s:Label text="|"/>
									  <s:Spacer width="100%" />
									  <s:Label text="{data.fileName}"/>
								  </s:HGroup>
							  </s:ItemRenderer>
							</fx:Component>
						</s:itemRenderer>
						<s:dataProvider>
							<s:ArrayCollection>

							</s:ArrayCollection>
						</s:dataProvider>
					</s:List>
				</s:VGroup>
				<s:VGroup width="100%">
					<s:HGroup width="100%">
						<s:Label text="Texture name" />
						<s:TextInput width="100%" text="{textureAtlasList.selectedItem.name}" change="textureAtlasList.selectedItem.name = event.target.text"/>
					</s:HGroup>
					<s:HGroup width="100%">

					<s:Label text="Texture format" />
					<s:ComboBox id="textureFormat" width="100%" selectedItem="{textureAtlasList.selectedItem.textureFormat}" change="textureAtlasList.selectedItem.textureFormat = event.target.selectedItem">
						<s:dataProvider>
							<s:ArrayList>
								<fx:String>RGBA</fx:String>
								<fx:String>RGBA4</fx:String>
								<fx:String>ALPHA</fx:String>
							</s:ArrayList>
						</s:dataProvider>
					</s:ComboBox>
					</s:HGroup>

					<s:HGroup width="100%">
						<s:Label text="Scale" />
						<s:TextInput id="scaleInput" widthInChars="4" text="{textureAtlasList.selectedItem.scale}" change="textureAtlasList.selectedItem.scale = event.target.text" />
						<s:Label text="Width" />
						<s:TextInput id="widthInput" widthInChars="4" text="{textureAtlasList.selectedItem.width}" change="textureAtlasList.selectedItem.width = event.target.text" />
						<s:Label text="Height" />
						<s:TextInput id="heighInput" widthInChars="4" text="{textureAtlasList.selectedItem.height}" change="textureAtlasList.selectedItem.height = event.target.text" />
					</s:HGroup>

					<s:HGroup width="100%" height="100%">
						<s:Button id="forgetPathButton" click="onClick(event)" label="Forget path" width="100" />
						<s:Button id="exportButton" click="onClick(event)" label="Export" width="100" />
					</s:HGroup>
				</s:VGroup>
			</s:VGroup>
		</s:HGroup>
	</s:VGroup>
</s:WindowedApplication>
